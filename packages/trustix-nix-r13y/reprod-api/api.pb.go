// Copyright Â© 2020-2022 The Trustix Authors
//
// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: reprod-api/api.proto

package reprod_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DerivationReproducibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrvPath string `protobuf:"bytes,1,opt,name=DrvPath,proto3" json:"DrvPath,omitempty"`
}

func (x *DerivationReproducibilityRequest) Reset() {
	*x = DerivationReproducibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationReproducibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationReproducibilityRequest) ProtoMessage() {}

func (x *DerivationReproducibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationReproducibilityRequest.ProtoReflect.Descriptor instead.
func (*DerivationReproducibilityRequest) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{0}
}

func (x *DerivationReproducibilityRequest) GetDrvPath() string {
	if x != nil {
		return x.DrvPath
	}
	return ""
}

type DerivationReproducibilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrvPath           string                                                   `protobuf:"bytes,1,opt,name=DrvPath,proto3" json:"DrvPath,omitempty"`
	UnreproducedPaths map[string]*DerivationReproducibilityResponse_Derivation `protobuf:"bytes,2,rep,name=UnreproducedPaths,proto3" json:"UnreproducedPaths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReproducedPaths   map[string]*DerivationReproducibilityResponse_Derivation `protobuf:"bytes,3,rep,name=ReproducedPaths,proto3" json:"ReproducedPaths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnknownPaths      map[string]*DerivationReproducibilityResponse_Derivation `protobuf:"bytes,4,rep,name=UnknownPaths,proto3" json:"UnknownPaths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MissingPaths      map[string]*DerivationReproducibilityResponse_Derivation `protobuf:"bytes,5,rep,name=MissingPaths,proto3" json:"MissingPaths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logs              map[string]*Log                                          `protobuf:"bytes,6,rep,name=Logs,proto3" json:"Logs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DerivationReproducibilityResponse) Reset() {
	*x = DerivationReproducibilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationReproducibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationReproducibilityResponse) ProtoMessage() {}

func (x *DerivationReproducibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationReproducibilityResponse.ProtoReflect.Descriptor instead.
func (*DerivationReproducibilityResponse) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{1}
}

func (x *DerivationReproducibilityResponse) GetDrvPath() string {
	if x != nil {
		return x.DrvPath
	}
	return ""
}

func (x *DerivationReproducibilityResponse) GetUnreproducedPaths() map[string]*DerivationReproducibilityResponse_Derivation {
	if x != nil {
		return x.UnreproducedPaths
	}
	return nil
}

func (x *DerivationReproducibilityResponse) GetReproducedPaths() map[string]*DerivationReproducibilityResponse_Derivation {
	if x != nil {
		return x.ReproducedPaths
	}
	return nil
}

func (x *DerivationReproducibilityResponse) GetUnknownPaths() map[string]*DerivationReproducibilityResponse_Derivation {
	if x != nil {
		return x.UnknownPaths
	}
	return nil
}

func (x *DerivationReproducibilityResponse) GetMissingPaths() map[string]*DerivationReproducibilityResponse_Derivation {
	if x != nil {
		return x.MissingPaths
	}
	return nil
}

func (x *DerivationReproducibilityResponse) GetLogs() map[string]*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogID string `protobuf:"bytes,1,opt,name=LogID,proto3" json:"LogID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{2}
}

func (x *Log) GetLogID() string {
	if x != nil {
		return x.LogID
	}
	return ""
}

func (x *Log) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AttrReproducibilityTimeSeriesPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvalID        int64   `protobuf:"varint,1,opt,name=EvalID,proto3" json:"EvalID,omitempty"`
	EvalTimestamp int64   `protobuf:"varint,2,opt,name=EvalTimestamp,proto3" json:"EvalTimestamp,omitempty"`
	DrvPath       string  `protobuf:"bytes,3,opt,name=DrvPath,proto3" json:"DrvPath,omitempty"`
	PctReproduced float32 `protobuf:"fixed32,4,opt,name=PctReproduced,proto3" json:"PctReproduced,omitempty"`
}

func (x *AttrReproducibilityTimeSeriesPoint) Reset() {
	*x = AttrReproducibilityTimeSeriesPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrReproducibilityTimeSeriesPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrReproducibilityTimeSeriesPoint) ProtoMessage() {}

func (x *AttrReproducibilityTimeSeriesPoint) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrReproducibilityTimeSeriesPoint.ProtoReflect.Descriptor instead.
func (*AttrReproducibilityTimeSeriesPoint) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{3}
}

func (x *AttrReproducibilityTimeSeriesPoint) GetEvalID() int64 {
	if x != nil {
		return x.EvalID
	}
	return 0
}

func (x *AttrReproducibilityTimeSeriesPoint) GetEvalTimestamp() int64 {
	if x != nil {
		return x.EvalTimestamp
	}
	return 0
}

func (x *AttrReproducibilityTimeSeriesPoint) GetDrvPath() string {
	if x != nil {
		return x.DrvPath
	}
	return ""
}

func (x *AttrReproducibilityTimeSeriesPoint) GetPctReproduced() float32 {
	if x != nil {
		return x.PctReproduced
	}
	return 0
}

type AttrReproducibilityTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points        []*AttrReproducibilityTimeSeriesPoint `protobuf:"bytes,1,rep,name=Points,proto3" json:"Points,omitempty"`
	PctReproduced float32                               `protobuf:"fixed32,2,opt,name=PctReproduced,proto3" json:"PctReproduced,omitempty"`
}

func (x *AttrReproducibilityTimeSeriesResponse) Reset() {
	*x = AttrReproducibilityTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrReproducibilityTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrReproducibilityTimeSeriesResponse) ProtoMessage() {}

func (x *AttrReproducibilityTimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrReproducibilityTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*AttrReproducibilityTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{4}
}

func (x *AttrReproducibilityTimeSeriesResponse) GetPoints() []*AttrReproducibilityTimeSeriesPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *AttrReproducibilityTimeSeriesResponse) GetPctReproduced() float32 {
	if x != nil {
		return x.PctReproduced
	}
	return 0
}

type AttrReproducibilityTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr    string `protobuf:"bytes,1,opt,name=Attr,proto3" json:"Attr,omitempty"`
	Start   int64  `protobuf:"varint,2,opt,name=Start,proto3" json:"Start,omitempty"`
	Stop    int64  `protobuf:"varint,3,opt,name=Stop,proto3" json:"Stop,omitempty"`
	Channel string `protobuf:"bytes,4,opt,name=Channel,proto3" json:"Channel,omitempty"`
}

func (x *AttrReproducibilityTimeSeriesRequest) Reset() {
	*x = AttrReproducibilityTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrReproducibilityTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrReproducibilityTimeSeriesRequest) ProtoMessage() {}

func (x *AttrReproducibilityTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrReproducibilityTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*AttrReproducibilityTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{5}
}

func (x *AttrReproducibilityTimeSeriesRequest) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

func (x *AttrReproducibilityTimeSeriesRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *AttrReproducibilityTimeSeriesRequest) GetStop() int64 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *AttrReproducibilityTimeSeriesRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type SuggestsAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrPrefix string `protobuf:"bytes,1,opt,name=AttrPrefix,proto3" json:"AttrPrefix,omitempty"`
}

func (x *SuggestsAttributeRequest) Reset() {
	*x = SuggestsAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestsAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestsAttributeRequest) ProtoMessage() {}

func (x *SuggestsAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestsAttributeRequest.ProtoReflect.Descriptor instead.
func (*SuggestsAttributeRequest) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{6}
}

func (x *SuggestsAttributeRequest) GetAttrPrefix() string {
	if x != nil {
		return x.AttrPrefix
	}
	return ""
}

type SuggestAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrs []string `protobuf:"bytes,1,rep,name=Attrs,proto3" json:"Attrs,omitempty"`
}

func (x *SuggestAttributeResponse) Reset() {
	*x = SuggestAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestAttributeResponse) ProtoMessage() {}

func (x *SuggestAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestAttributeResponse.ProtoReflect.Descriptor instead.
func (*SuggestAttributeResponse) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{7}
}

func (x *SuggestAttributeResponse) GetAttrs() []string {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type DiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputHash1 string `protobuf:"bytes,1,opt,name=OutputHash1,proto3" json:"OutputHash1,omitempty"`
	OutputHash2 string `protobuf:"bytes,2,opt,name=OutputHash2,proto3" json:"OutputHash2,omitempty"`
}

func (x *DiffRequest) Reset() {
	*x = DiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffRequest) ProtoMessage() {}

func (x *DiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffRequest.ProtoReflect.Descriptor instead.
func (*DiffRequest) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{8}
}

func (x *DiffRequest) GetOutputHash1() string {
	if x != nil {
		return x.OutputHash1
	}
	return ""
}

func (x *DiffRequest) GetOutputHash2() string {
	if x != nil {
		return x.OutputHash2
	}
	return ""
}

type DiffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HTMLDiff string `protobuf:"bytes,1,opt,name=HTMLDiff,proto3" json:"HTMLDiff,omitempty"`
}

func (x *DiffResponse) Reset() {
	*x = DiffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffResponse) ProtoMessage() {}

func (x *DiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffResponse.ProtoReflect.Descriptor instead.
func (*DiffResponse) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{9}
}

func (x *DiffResponse) GetHTMLDiff() string {
	if x != nil {
		return x.HTMLDiff
	}
	return ""
}

type AttrReproducibilityTimeSeriesGroupedbyChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelRequest) Reset() {
	*x = AttrReproducibilityTimeSeriesGroupedbyChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrReproducibilityTimeSeriesGroupedbyChannelRequest) ProtoMessage() {}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrReproducibilityTimeSeriesGroupedbyChannelRequest.ProtoReflect.Descriptor instead.
func (*AttrReproducibilityTimeSeriesGroupedbyChannelRequest) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{10}
}

type AttrReproducibilityTimeSeriesGroupedbyChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels map[string]*AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel `protobuf:"bytes,1,rep,name=Channels,proto3" json:"Channels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelResponse) Reset() {
	*x = AttrReproducibilityTimeSeriesGroupedbyChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrReproducibilityTimeSeriesGroupedbyChannelResponse) ProtoMessage() {}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrReproducibilityTimeSeriesGroupedbyChannelResponse.ProtoReflect.Descriptor instead.
func (*AttrReproducibilityTimeSeriesGroupedbyChannelResponse) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{11}
}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelResponse) GetChannels() map[string]*AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type DerivationReproducibilityResponse_DerivationOutputHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogIDs []string `protobuf:"bytes,1,rep,name=LogIDs,proto3" json:"LogIDs,omitempty"`
}

func (x *DerivationReproducibilityResponse_DerivationOutputHash) Reset() {
	*x = DerivationReproducibilityResponse_DerivationOutputHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationReproducibilityResponse_DerivationOutputHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationReproducibilityResponse_DerivationOutputHash) ProtoMessage() {}

func (x *DerivationReproducibilityResponse_DerivationOutputHash) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationReproducibilityResponse_DerivationOutputHash.ProtoReflect.Descriptor instead.
func (*DerivationReproducibilityResponse_DerivationOutputHash) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DerivationReproducibilityResponse_DerivationOutputHash) GetLogIDs() []string {
	if x != nil {
		return x.LogIDs
	}
	return nil
}

type DerivationReproducibilityResponse_DerivationOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output    string `protobuf:"bytes,1,opt,name=Output,proto3" json:"Output,omitempty"`
	StorePath string `protobuf:"bytes,2,opt,name=StorePath,proto3" json:"StorePath,omitempty"`
	// Map output hash to log id
	OutputHashes map[string]*DerivationReproducibilityResponse_DerivationOutputHash `protobuf:"bytes,3,rep,name=OutputHashes,proto3" json:"OutputHashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DerivationReproducibilityResponse_DerivationOutput) Reset() {
	*x = DerivationReproducibilityResponse_DerivationOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationReproducibilityResponse_DerivationOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationReproducibilityResponse_DerivationOutput) ProtoMessage() {}

func (x *DerivationReproducibilityResponse_DerivationOutput) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationReproducibilityResponse_DerivationOutput.ProtoReflect.Descriptor instead.
func (*DerivationReproducibilityResponse_DerivationOutput) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{1, 1}
}

func (x *DerivationReproducibilityResponse_DerivationOutput) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *DerivationReproducibilityResponse_DerivationOutput) GetStorePath() string {
	if x != nil {
		return x.StorePath
	}
	return ""
}

func (x *DerivationReproducibilityResponse_DerivationOutput) GetOutputHashes() map[string]*DerivationReproducibilityResponse_DerivationOutputHash {
	if x != nil {
		return x.OutputHashes
	}
	return nil
}

type DerivationReproducibilityResponse_Derivation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs map[string]*DerivationReproducibilityResponse_DerivationOutput `protobuf:"bytes,2,rep,name=Outputs,proto3" json:"Outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DerivationReproducibilityResponse_Derivation) Reset() {
	*x = DerivationReproducibilityResponse_Derivation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationReproducibilityResponse_Derivation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationReproducibilityResponse_Derivation) ProtoMessage() {}

func (x *DerivationReproducibilityResponse_Derivation) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationReproducibilityResponse_Derivation.ProtoReflect.Descriptor instead.
func (*DerivationReproducibilityResponse_Derivation) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{1, 2}
}

func (x *DerivationReproducibilityResponse_Derivation) GetOutputs() map[string]*DerivationReproducibilityResponse_DerivationOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrs map[string]*AttrReproducibilityTimeSeriesResponse `protobuf:"bytes,1,rep,name=Attrs,proto3" json:"Attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel) Reset() {
	*x = AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reprod_api_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel) ProtoMessage() {}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_reprod_api_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel.ProtoReflect.Descriptor instead.
func (*AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel) Descriptor() ([]byte, []int) {
	return file_reprod_api_api_proto_rawDescGZIP(), []int{11, 0}
}

func (x *AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel) GetAttrs() map[string]*AttrReproducibilityTimeSeriesResponse {
	if x != nil {
		return x.Attrs
	}
	return nil
}

var File_reprod_api_api_proto protoreflect.FileDescriptor

var file_reprod_api_api_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x22, 0x3c, 0x0a, 0x20, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x72, 0x76,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x72, 0x76, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x82, 0x0e, 0x0a, 0x21, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x72, 0x76,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x72, 0x76, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x75, 0x0a, 0x11, 0x55, 0x6e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x55, 0x6e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x55, 0x6e, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x6f, 0x0a, 0x0f, 0x52, 0x65,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x52, 0x65, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x4e, 0x0a, 0x04, 0x4c,
	0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x2e, 0x0a, 0x14, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x73, 0x1a, 0xca, 0x02, 0x0a, 0x10,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x77, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a,
	0x86, 0x01, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xef, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x7d, 0x0a, 0x0c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x57, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x81, 0x01, 0x0a, 0x16, 0x55,
	0x6e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7f,
	0x0a, 0x14, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x7c, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a,
	0x11, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x09, 0x4c,
	0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x22, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x45, 0x76, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x45, 0x76, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x76, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x45, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x44, 0x72, 0x76, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x44, 0x72, 0x76, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x50, 0x63, 0x74, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x22, 0x98,
	0x01, 0x0a, 0x25, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x63, 0x74, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x50, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x22, 0x7e, 0x0a, 0x24, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x41, 0x74, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3a, 0x0a, 0x18, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x30, 0x0a, 0x18, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x0b, 0x44, 0x69, 0x66, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x32, 0x22, 0x2a, 0x0a, 0x0c, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x54,
	0x4d, 0x4c, 0x44, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x54,
	0x4d, 0x4c, 0x44, 0x69, 0x66, 0x66, 0x22, 0x36, 0x0a, 0x34, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x62, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9e,
	0x04, 0x0a, 0x35, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x62, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x62,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xe8, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x6d, 0x0a, 0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x62, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x41, 0x74,
	0x74, 0x72, 0x73, 0x1a, 0x6e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x89, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x62, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x62, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0x90, 0x05, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x41, 0x50, 0x49, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x1d, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbc, 0x01, 0x0a, 0x2d, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65,
	0x64, 0x62, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x43, 0x2e, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x62,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x62, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x10, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x04, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1a, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x69, 0x78, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x2d, 0x6e, 0x69, 0x78, 0x2d, 0x72, 0x31, 0x33, 0x79,
	0x2f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_reprod_api_api_proto_rawDescOnce sync.Once
	file_reprod_api_api_proto_rawDescData = file_reprod_api_api_proto_rawDesc
)

func file_reprod_api_api_proto_rawDescGZIP() []byte {
	file_reprod_api_api_proto_rawDescOnce.Do(func() {
		file_reprod_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_reprod_api_api_proto_rawDescData)
	})
	return file_reprod_api_api_proto_rawDescData
}

var file_reprod_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_reprod_api_api_proto_goTypes = []interface{}{
	(*DerivationReproducibilityRequest)(nil),  // 0: reprod_api.v1.DerivationReproducibilityRequest
	(*DerivationReproducibilityResponse)(nil), // 1: reprod_api.v1.DerivationReproducibilityResponse
	(*Log)(nil), // 2: reprod_api.v1.Log
	(*AttrReproducibilityTimeSeriesPoint)(nil),                     // 3: reprod_api.v1.AttrReproducibilityTimeSeriesPoint
	(*AttrReproducibilityTimeSeriesResponse)(nil),                  // 4: reprod_api.v1.AttrReproducibilityTimeSeriesResponse
	(*AttrReproducibilityTimeSeriesRequest)(nil),                   // 5: reprod_api.v1.AttrReproducibilityTimeSeriesRequest
	(*SuggestsAttributeRequest)(nil),                               // 6: reprod_api.v1.SuggestsAttributeRequest
	(*SuggestAttributeResponse)(nil),                               // 7: reprod_api.v1.SuggestAttributeResponse
	(*DiffRequest)(nil),                                            // 8: reprod_api.v1.DiffRequest
	(*DiffResponse)(nil),                                           // 9: reprod_api.v1.DiffResponse
	(*AttrReproducibilityTimeSeriesGroupedbyChannelRequest)(nil),   // 10: reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelRequest
	(*AttrReproducibilityTimeSeriesGroupedbyChannelResponse)(nil),  // 11: reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse
	(*DerivationReproducibilityResponse_DerivationOutputHash)(nil), // 12: reprod_api.v1.DerivationReproducibilityResponse.DerivationOutputHash
	(*DerivationReproducibilityResponse_DerivationOutput)(nil),     // 13: reprod_api.v1.DerivationReproducibilityResponse.DerivationOutput
	(*DerivationReproducibilityResponse_Derivation)(nil),           // 14: reprod_api.v1.DerivationReproducibilityResponse.Derivation
	nil, // 15: reprod_api.v1.DerivationReproducibilityResponse.UnreproducedPathsEntry
	nil, // 16: reprod_api.v1.DerivationReproducibilityResponse.ReproducedPathsEntry
	nil, // 17: reprod_api.v1.DerivationReproducibilityResponse.UnknownPathsEntry
	nil, // 18: reprod_api.v1.DerivationReproducibilityResponse.MissingPathsEntry
	nil, // 19: reprod_api.v1.DerivationReproducibilityResponse.LogsEntry
	nil, // 20: reprod_api.v1.DerivationReproducibilityResponse.DerivationOutput.OutputHashesEntry
	nil, // 21: reprod_api.v1.DerivationReproducibilityResponse.Derivation.OutputsEntry
	(*AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel)(nil), // 22: reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.Channel
	nil, // 23: reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.ChannelsEntry
	nil, // 24: reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.Channel.AttrsEntry
}
var file_reprod_api_api_proto_depIdxs = []int32{
	15, // 0: reprod_api.v1.DerivationReproducibilityResponse.UnreproducedPaths:type_name -> reprod_api.v1.DerivationReproducibilityResponse.UnreproducedPathsEntry
	16, // 1: reprod_api.v1.DerivationReproducibilityResponse.ReproducedPaths:type_name -> reprod_api.v1.DerivationReproducibilityResponse.ReproducedPathsEntry
	17, // 2: reprod_api.v1.DerivationReproducibilityResponse.UnknownPaths:type_name -> reprod_api.v1.DerivationReproducibilityResponse.UnknownPathsEntry
	18, // 3: reprod_api.v1.DerivationReproducibilityResponse.MissingPaths:type_name -> reprod_api.v1.DerivationReproducibilityResponse.MissingPathsEntry
	19, // 4: reprod_api.v1.DerivationReproducibilityResponse.Logs:type_name -> reprod_api.v1.DerivationReproducibilityResponse.LogsEntry
	3,  // 5: reprod_api.v1.AttrReproducibilityTimeSeriesResponse.Points:type_name -> reprod_api.v1.AttrReproducibilityTimeSeriesPoint
	23, // 6: reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.Channels:type_name -> reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.ChannelsEntry
	20, // 7: reprod_api.v1.DerivationReproducibilityResponse.DerivationOutput.OutputHashes:type_name -> reprod_api.v1.DerivationReproducibilityResponse.DerivationOutput.OutputHashesEntry
	21, // 8: reprod_api.v1.DerivationReproducibilityResponse.Derivation.Outputs:type_name -> reprod_api.v1.DerivationReproducibilityResponse.Derivation.OutputsEntry
	14, // 9: reprod_api.v1.DerivationReproducibilityResponse.UnreproducedPathsEntry.value:type_name -> reprod_api.v1.DerivationReproducibilityResponse.Derivation
	14, // 10: reprod_api.v1.DerivationReproducibilityResponse.ReproducedPathsEntry.value:type_name -> reprod_api.v1.DerivationReproducibilityResponse.Derivation
	14, // 11: reprod_api.v1.DerivationReproducibilityResponse.UnknownPathsEntry.value:type_name -> reprod_api.v1.DerivationReproducibilityResponse.Derivation
	14, // 12: reprod_api.v1.DerivationReproducibilityResponse.MissingPathsEntry.value:type_name -> reprod_api.v1.DerivationReproducibilityResponse.Derivation
	2,  // 13: reprod_api.v1.DerivationReproducibilityResponse.LogsEntry.value:type_name -> reprod_api.v1.Log
	12, // 14: reprod_api.v1.DerivationReproducibilityResponse.DerivationOutput.OutputHashesEntry.value:type_name -> reprod_api.v1.DerivationReproducibilityResponse.DerivationOutputHash
	13, // 15: reprod_api.v1.DerivationReproducibilityResponse.Derivation.OutputsEntry.value:type_name -> reprod_api.v1.DerivationReproducibilityResponse.DerivationOutput
	24, // 16: reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.Channel.Attrs:type_name -> reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.Channel.AttrsEntry
	22, // 17: reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.ChannelsEntry.value:type_name -> reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.Channel
	4,  // 18: reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse.Channel.AttrsEntry.value:type_name -> reprod_api.v1.AttrReproducibilityTimeSeriesResponse
	0,  // 19: reprod_api.v1.ReproducibilityAPI.DerivationReproducibility:input_type -> reprod_api.v1.DerivationReproducibilityRequest
	5,  // 20: reprod_api.v1.ReproducibilityAPI.AttrReproducibilityTimeSeries:input_type -> reprod_api.v1.AttrReproducibilityTimeSeriesRequest
	10, // 21: reprod_api.v1.ReproducibilityAPI.AttrReproducibilityTimeSeriesGroupedbyChannel:input_type -> reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelRequest
	6,  // 22: reprod_api.v1.ReproducibilityAPI.SuggestAttribute:input_type -> reprod_api.v1.SuggestsAttributeRequest
	8,  // 23: reprod_api.v1.ReproducibilityAPI.Diff:input_type -> reprod_api.v1.DiffRequest
	1,  // 24: reprod_api.v1.ReproducibilityAPI.DerivationReproducibility:output_type -> reprod_api.v1.DerivationReproducibilityResponse
	4,  // 25: reprod_api.v1.ReproducibilityAPI.AttrReproducibilityTimeSeries:output_type -> reprod_api.v1.AttrReproducibilityTimeSeriesResponse
	11, // 26: reprod_api.v1.ReproducibilityAPI.AttrReproducibilityTimeSeriesGroupedbyChannel:output_type -> reprod_api.v1.AttrReproducibilityTimeSeriesGroupedbyChannelResponse
	7,  // 27: reprod_api.v1.ReproducibilityAPI.SuggestAttribute:output_type -> reprod_api.v1.SuggestAttributeResponse
	9,  // 28: reprod_api.v1.ReproducibilityAPI.Diff:output_type -> reprod_api.v1.DiffResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_reprod_api_api_proto_init() }
func file_reprod_api_api_proto_init() {
	if File_reprod_api_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_reprod_api_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationReproducibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationReproducibilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrReproducibilityTimeSeriesPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrReproducibilityTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrReproducibilityTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestsAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrReproducibilityTimeSeriesGroupedbyChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrReproducibilityTimeSeriesGroupedbyChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationReproducibilityResponse_DerivationOutputHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationReproducibilityResponse_DerivationOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationReproducibilityResponse_Derivation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reprod_api_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrReproducibilityTimeSeriesGroupedbyChannelResponse_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reprod_api_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reprod_api_api_proto_goTypes,
		DependencyIndexes: file_reprod_api_api_proto_depIdxs,
		MessageInfos:      file_reprod_api_api_proto_msgTypes,
	}.Build()
	File_reprod_api_api_proto = out.File
	file_reprod_api_api_proto_rawDesc = nil
	file_reprod_api_api_proto_goTypes = nil
	file_reprod_api_api_proto_depIdxs = nil
}
