// Copyright Â© 2020-2022 The Trustix Authors
//
// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: api/api.proto

package api

import (
	schema "github.com/nix-community/trustix/packages/trustix-proto/schema"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogSigner_KeyTypes int32

const (
	LogSigner_ed25519 LogSigner_KeyTypes = 0
)

// Enum value maps for LogSigner_KeyTypes.
var (
	LogSigner_KeyTypes_name = map[int32]string{
		0: "ed25519",
	}
	LogSigner_KeyTypes_value = map[string]int32{
		"ed25519": 0,
	}
)

func (x LogSigner_KeyTypes) Enum() *LogSigner_KeyTypes {
	p := new(LogSigner_KeyTypes)
	*p = x
	return p
}

func (x LogSigner_KeyTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogSigner_KeyTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[0].Descriptor()
}

func (LogSigner_KeyTypes) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[0]
}

func (x LogSigner_KeyTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LogSigner_KeyTypes) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LogSigner_KeyTypes(num)
	return nil
}

// Deprecated: Use LogSigner_KeyTypes.Descriptor instead.
func (LogSigner_KeyTypes) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{13, 0}
}

type Log_LogModes int32

const (
	Log_Log Log_LogModes = 0
)

// Enum value maps for Log_LogModes.
var (
	Log_LogModes_name = map[int32]string{
		0: "Log",
	}
	Log_LogModes_value = map[string]int32{
		"Log": 0,
	}
)

func (x Log_LogModes) Enum() *Log_LogModes {
	p := new(Log_LogModes)
	*p = x
	return p
}

func (x Log_LogModes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Log_LogModes) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[1].Descriptor()
}

func (Log_LogModes) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[1]
}

func (x Log_LogModes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Log_LogModes) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Log_LogModes(num)
	return nil
}

// Deprecated: Use Log_LogModes.Descriptor instead.
func (Log_LogModes) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{14, 0}
}

// Request a signed head for a given log
type LogHeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log identifier
	LogID *string `protobuf:"bytes,1,req,name=LogID" json:"LogID,omitempty"`
}

func (x *LogHeadRequest) Reset() {
	*x = LogHeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogHeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogHeadRequest) ProtoMessage() {}

func (x *LogHeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogHeadRequest.ProtoReflect.Descriptor instead.
func (*LogHeadRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{0}
}

func (x *LogHeadRequest) GetLogID() string {
	if x != nil && x.LogID != nil {
		return *x.LogID
	}
	return ""
}

// Get a consistency proof between two given log sizes
type GetLogConsistencyProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log identifier
	LogID *string `protobuf:"bytes,1,req,name=LogID" json:"LogID,omitempty"`
	// From tree size
	FirstSize *uint64 `protobuf:"varint,2,req,name=FirstSize" json:"FirstSize,omitempty"`
	// To tree size
	SecondSize *uint64 `protobuf:"varint,3,req,name=SecondSize" json:"SecondSize,omitempty"`
}

func (x *GetLogConsistencyProofRequest) Reset() {
	*x = GetLogConsistencyProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogConsistencyProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogConsistencyProofRequest) ProtoMessage() {}

func (x *GetLogConsistencyProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogConsistencyProofRequest.ProtoReflect.Descriptor instead.
func (*GetLogConsistencyProofRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetLogConsistencyProofRequest) GetLogID() string {
	if x != nil && x.LogID != nil {
		return *x.LogID
	}
	return ""
}

func (x *GetLogConsistencyProofRequest) GetFirstSize() uint64 {
	if x != nil && x.FirstSize != nil {
		return *x.FirstSize
	}
	return 0
}

func (x *GetLogConsistencyProofRequest) GetSecondSize() uint64 {
	if x != nil && x.SecondSize != nil {
		return *x.SecondSize
	}
	return 0
}

type ProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof [][]byte `protobuf:"bytes,1,rep,name=Proof" json:"Proof,omitempty"`
}

func (x *ProofResponse) Reset() {
	*x = ProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofResponse) ProtoMessage() {}

func (x *ProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofResponse.ProtoReflect.Descriptor instead.
func (*ProofResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{2}
}

func (x *ProofResponse) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// Get log audit proof for a given tree
type GetLogAuditProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log identifier
	LogID *string `protobuf:"bytes,1,req,name=LogID" json:"LogID,omitempty"`
	// Tree node index
	Index *uint64 `protobuf:"varint,2,req,name=Index" json:"Index,omitempty"`
	// Tree size (proof reference)
	TreeSize *uint64 `protobuf:"varint,3,req,name=TreeSize" json:"TreeSize,omitempty"`
}

func (x *GetLogAuditProofRequest) Reset() {
	*x = GetLogAuditProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogAuditProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogAuditProofRequest) ProtoMessage() {}

func (x *GetLogAuditProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogAuditProofRequest.ProtoReflect.Descriptor instead.
func (*GetLogAuditProofRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetLogAuditProofRequest) GetLogID() string {
	if x != nil && x.LogID != nil {
		return *x.LogID
	}
	return ""
}

func (x *GetLogAuditProofRequest) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *GetLogAuditProofRequest) GetTreeSize() uint64 {
	if x != nil && x.TreeSize != nil {
		return *x.TreeSize
	}
	return 0
}

type GetLogEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log identifier
	LogID *string `protobuf:"bytes,1,req,name=LogID" json:"LogID,omitempty"`
	// Get entries from
	Start *uint64 `protobuf:"varint,2,req,name=Start" json:"Start,omitempty"`
	// Get entries to
	Finish *uint64 `protobuf:"varint,3,req,name=Finish" json:"Finish,omitempty"`
}

func (x *GetLogEntriesRequest) Reset() {
	*x = GetLogEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogEntriesRequest) ProtoMessage() {}

func (x *GetLogEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogEntriesRequest.ProtoReflect.Descriptor instead.
func (*GetLogEntriesRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetLogEntriesRequest) GetLogID() string {
	if x != nil && x.LogID != nil {
		return *x.LogID
	}
	return ""
}

func (x *GetLogEntriesRequest) GetStart() uint64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *GetLogEntriesRequest) GetFinish() uint64 {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return 0
}

type GetMapValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log identifier
	LogID *string `protobuf:"bytes,1,req,name=LogID" json:"LogID,omitempty"`
	// Map key
	Key []byte `protobuf:"bytes,2,req,name=Key" json:"Key,omitempty"`
	// Map root hash to derive proof from
	MapRoot []byte `protobuf:"bytes,3,req,name=MapRoot" json:"MapRoot,omitempty"`
}

func (x *GetMapValueRequest) Reset() {
	*x = GetMapValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMapValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMapValueRequest) ProtoMessage() {}

func (x *GetMapValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMapValueRequest.ProtoReflect.Descriptor instead.
func (*GetMapValueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetMapValueRequest) GetLogID() string {
	if x != nil && x.LogID != nil {
		return *x.LogID
	}
	return ""
}

func (x *GetMapValueRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetMapValueRequest) GetMapRoot() []byte {
	if x != nil {
		return x.MapRoot
	}
	return nil
}

// Sparse merkle tree proof
type SparseCompactMerkleProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SideNodes             [][]byte `protobuf:"bytes,1,rep,name=SideNodes" json:"SideNodes,omitempty"`
	NonMembershipLeafData []byte   `protobuf:"bytes,2,opt,name=NonMembershipLeafData" json:"NonMembershipLeafData,omitempty"`
	BitMask               []byte   `protobuf:"bytes,3,req,name=BitMask" json:"BitMask,omitempty"`
	NumSideNodes          *uint64  `protobuf:"varint,4,req,name=NumSideNodes" json:"NumSideNodes,omitempty"`
}

func (x *SparseCompactMerkleProof) Reset() {
	*x = SparseCompactMerkleProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseCompactMerkleProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseCompactMerkleProof) ProtoMessage() {}

func (x *SparseCompactMerkleProof) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseCompactMerkleProof.ProtoReflect.Descriptor instead.
func (*SparseCompactMerkleProof) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{6}
}

func (x *SparseCompactMerkleProof) GetSideNodes() [][]byte {
	if x != nil {
		return x.SideNodes
	}
	return nil
}

func (x *SparseCompactMerkleProof) GetNonMembershipLeafData() []byte {
	if x != nil {
		return x.NonMembershipLeafData
	}
	return nil
}

func (x *SparseCompactMerkleProof) GetBitMask() []byte {
	if x != nil {
		return x.BitMask
	}
	return nil
}

func (x *SparseCompactMerkleProof) GetNumSideNodes() uint64 {
	if x != nil && x.NumSideNodes != nil {
		return *x.NumSideNodes
	}
	return 0
}

type MapValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note that the Value field is actually a MapEntry
	// but we need to return the marshaled version
	// as that's what the proof is created from
	Value []byte                    `protobuf:"bytes,1,req,name=Value" json:"Value,omitempty"`
	Proof *SparseCompactMerkleProof `protobuf:"bytes,2,req,name=Proof" json:"Proof,omitempty"`
}

func (x *MapValueResponse) Reset() {
	*x = MapValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapValueResponse) ProtoMessage() {}

func (x *MapValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapValueResponse.ProtoReflect.Descriptor instead.
func (*MapValueResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{7}
}

func (x *MapValueResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MapValueResponse) GetProof() *SparseCompactMerkleProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type LogEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaves []*schema.LogLeaf `protobuf:"bytes,1,rep,name=Leaves" json:"Leaves,omitempty"`
}

func (x *LogEntriesResponse) Reset() {
	*x = LogEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntriesResponse) ProtoMessage() {}

func (x *LogEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntriesResponse.ProtoReflect.Descriptor instead.
func (*LogEntriesResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{8}
}

func (x *LogEntriesResponse) GetLeaves() []*schema.LogLeaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map key
	Key []byte `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	// Map value
	Value []byte `protobuf:"bytes,2,req,name=Value" json:"Value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{9}
}

func (x *KeyValuePair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValuePair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest []byte `protobuf:"bytes,1,req,name=Digest" json:"Digest,omitempty"`
}

func (x *ValueRequest) Reset() {
	*x = ValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRequest) ProtoMessage() {}

func (x *ValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRequest.ProtoReflect.Descriptor instead.
func (*ValueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{10}
}

func (x *ValueRequest) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type ValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,req,name=Value" json:"Value,omitempty"`
}

func (x *ValueResponse) Reset() {
	*x = ValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueResponse) ProtoMessage() {}

func (x *ValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueResponse.ProtoReflect.Descriptor instead.
func (*ValueResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{11}
}

func (x *ValueResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type LogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow to filter logs response based on the protocol identifier
	Protocols []string `protobuf:"bytes,1,rep,name=Protocols" json:"Protocols,omitempty"`
}

func (x *LogsRequest) Reset() {
	*x = LogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsRequest) ProtoMessage() {}

func (x *LogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsRequest.ProtoReflect.Descriptor instead.
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{12}
}

func (x *LogsRequest) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type LogSigner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType *LogSigner_KeyTypes `protobuf:"varint,1,req,name=KeyType,enum=trustix_api.v1.LogSigner_KeyTypes" json:"KeyType,omitempty"`
	Public  *string             `protobuf:"bytes,2,req,name=Public" json:"Public,omitempty"`
}

func (x *LogSigner) Reset() {
	*x = LogSigner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSigner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSigner) ProtoMessage() {}

func (x *LogSigner) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSigner.ProtoReflect.Descriptor instead.
func (*LogSigner) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{13}
}

func (x *LogSigner) GetKeyType() LogSigner_KeyTypes {
	if x != nil && x.KeyType != nil {
		return *x.KeyType
	}
	return LogSigner_ed25519
}

func (x *LogSigner) GetPublic() string {
	if x != nil && x.Public != nil {
		return *x.Public
	}
	return ""
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogID    *string           `protobuf:"bytes,1,req,name=LogID" json:"LogID,omitempty"`
	Mode     *Log_LogModes     `protobuf:"varint,2,req,name=Mode,enum=trustix_api.v1.Log_LogModes" json:"Mode,omitempty"`
	Protocol *string           `protobuf:"bytes,3,req,name=Protocol" json:"Protocol,omitempty"`
	Signer   *LogSigner        `protobuf:"bytes,4,req,name=Signer" json:"Signer,omitempty"`
	Meta     map[string]string `protobuf:"bytes,5,rep,name=Meta" json:"Meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{14}
}

func (x *Log) GetLogID() string {
	if x != nil && x.LogID != nil {
		return *x.LogID
	}
	return ""
}

func (x *Log) GetMode() Log_LogModes {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Log_Log
}

func (x *Log) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *Log) GetSigner() *LogSigner {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *Log) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type LogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*Log `protobuf:"bytes,1,rep,name=Logs" json:"Logs,omitempty"`
}

func (x *LogsResponse) Reset() {
	*x = LogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsResponse) ProtoMessage() {}

func (x *LogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsResponse.ProtoReflect.Descriptor instead.
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{15}
}

func (x *LogsResponse) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_api_api_proto protoreflect.FileDescriptor

var file_api_api_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a,
	0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6c, 0x6f, 0x67, 0x68, 0x65, 0x61, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6c, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x0e, 0x4c,
	0x6f, 0x67, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f,
	0x67, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22,
	0x61, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x5a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x56,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x4d,
	0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x53, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x15, 0x4e, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x4c, 0x65, 0x61, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x15, 0x4e, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4c,
	0x65, 0x61, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x4e, 0x75, 0x6d, 0x53, 0x69, 0x64, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3e, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22,
	0x48, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x61,
	0x66, 0x52, 0x06, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x26, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x0d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x2b, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x22, 0x7a, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x22, 0x17, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x00, 0x22, 0x9d, 0x02, 0x0a, 0x03, 0x4c, 0x6f,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x52, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d,
	0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x13, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x10, 0x00, 0x22, 0x37, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x4c, 0x6f, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x4c, 0x6f,
	0x67, 0x73, 0x32, 0x99, 0x01, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x49, 0x12, 0x43,
	0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf8,
	0x05, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x41, 0x50, 0x49, 0x12, 0x47, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2d, 0x2e, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x27, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x48, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2d, 0x2e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x48, 0x4c, 0x6f, 0x67, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x27, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4d, 0x48, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69, 0x78, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x2f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x69, 0x78, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69,
}

var (
	file_api_api_proto_rawDescOnce sync.Once
	file_api_api_proto_rawDescData = file_api_api_proto_rawDesc
)

func file_api_api_proto_rawDescGZIP() []byte {
	file_api_api_proto_rawDescOnce.Do(func() {
		file_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_api_proto_rawDescData)
	})
	return file_api_api_proto_rawDescData
}

var file_api_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_api_api_proto_goTypes = []interface{}{
	(LogSigner_KeyTypes)(0),               // 0: trustix_api.v1.LogSigner.KeyTypes
	(Log_LogModes)(0),                     // 1: trustix_api.v1.Log.LogModes
	(*LogHeadRequest)(nil),                // 2: trustix_api.v1.LogHeadRequest
	(*GetLogConsistencyProofRequest)(nil), // 3: trustix_api.v1.GetLogConsistencyProofRequest
	(*ProofResponse)(nil),                 // 4: trustix_api.v1.ProofResponse
	(*GetLogAuditProofRequest)(nil),       // 5: trustix_api.v1.GetLogAuditProofRequest
	(*GetLogEntriesRequest)(nil),          // 6: trustix_api.v1.GetLogEntriesRequest
	(*GetMapValueRequest)(nil),            // 7: trustix_api.v1.GetMapValueRequest
	(*SparseCompactMerkleProof)(nil),      // 8: trustix_api.v1.SparseCompactMerkleProof
	(*MapValueResponse)(nil),              // 9: trustix_api.v1.MapValueResponse
	(*LogEntriesResponse)(nil),            // 10: trustix_api.v1.LogEntriesResponse
	(*KeyValuePair)(nil),                  // 11: trustix_api.v1.KeyValuePair
	(*ValueRequest)(nil),                  // 12: trustix_api.v1.ValueRequest
	(*ValueResponse)(nil),                 // 13: trustix_api.v1.ValueResponse
	(*LogsRequest)(nil),                   // 14: trustix_api.v1.LogsRequest
	(*LogSigner)(nil),                     // 15: trustix_api.v1.LogSigner
	(*Log)(nil),                           // 16: trustix_api.v1.Log
	(*LogsResponse)(nil),                  // 17: trustix_api.v1.LogsResponse
	nil,                                   // 18: trustix_api.v1.Log.MetaEntry
	(*schema.LogLeaf)(nil),                // 19: trustix_schema.v1.LogLeaf
	(*schema.LogHead)(nil),                // 20: trustix_schema.v1.LogHead
}
var file_api_api_proto_depIdxs = []int32{
	8,  // 0: trustix_api.v1.MapValueResponse.Proof:type_name -> trustix_api.v1.SparseCompactMerkleProof
	19, // 1: trustix_api.v1.LogEntriesResponse.Leaves:type_name -> trustix_schema.v1.LogLeaf
	0,  // 2: trustix_api.v1.LogSigner.KeyType:type_name -> trustix_api.v1.LogSigner.KeyTypes
	1,  // 3: trustix_api.v1.Log.Mode:type_name -> trustix_api.v1.Log.LogModes
	15, // 4: trustix_api.v1.Log.Signer:type_name -> trustix_api.v1.LogSigner
	18, // 5: trustix_api.v1.Log.Meta:type_name -> trustix_api.v1.Log.MetaEntry
	16, // 6: trustix_api.v1.LogsResponse.Logs:type_name -> trustix_api.v1.Log
	14, // 7: trustix_api.v1.NodeAPI.Logs:input_type -> trustix_api.v1.LogsRequest
	12, // 8: trustix_api.v1.NodeAPI.GetValue:input_type -> trustix_api.v1.ValueRequest
	2,  // 9: trustix_api.v1.LogAPI.GetHead:input_type -> trustix_api.v1.LogHeadRequest
	3,  // 10: trustix_api.v1.LogAPI.GetLogConsistencyProof:input_type -> trustix_api.v1.GetLogConsistencyProofRequest
	5,  // 11: trustix_api.v1.LogAPI.GetLogAuditProof:input_type -> trustix_api.v1.GetLogAuditProofRequest
	6,  // 12: trustix_api.v1.LogAPI.GetLogEntries:input_type -> trustix_api.v1.GetLogEntriesRequest
	7,  // 13: trustix_api.v1.LogAPI.GetMapValue:input_type -> trustix_api.v1.GetMapValueRequest
	3,  // 14: trustix_api.v1.LogAPI.GetMHLogConsistencyProof:input_type -> trustix_api.v1.GetLogConsistencyProofRequest
	5,  // 15: trustix_api.v1.LogAPI.GetMHLogAuditProof:input_type -> trustix_api.v1.GetLogAuditProofRequest
	6,  // 16: trustix_api.v1.LogAPI.GetMHLogEntries:input_type -> trustix_api.v1.GetLogEntriesRequest
	17, // 17: trustix_api.v1.NodeAPI.Logs:output_type -> trustix_api.v1.LogsResponse
	13, // 18: trustix_api.v1.NodeAPI.GetValue:output_type -> trustix_api.v1.ValueResponse
	20, // 19: trustix_api.v1.LogAPI.GetHead:output_type -> trustix_schema.v1.LogHead
	4,  // 20: trustix_api.v1.LogAPI.GetLogConsistencyProof:output_type -> trustix_api.v1.ProofResponse
	4,  // 21: trustix_api.v1.LogAPI.GetLogAuditProof:output_type -> trustix_api.v1.ProofResponse
	10, // 22: trustix_api.v1.LogAPI.GetLogEntries:output_type -> trustix_api.v1.LogEntriesResponse
	9,  // 23: trustix_api.v1.LogAPI.GetMapValue:output_type -> trustix_api.v1.MapValueResponse
	4,  // 24: trustix_api.v1.LogAPI.GetMHLogConsistencyProof:output_type -> trustix_api.v1.ProofResponse
	4,  // 25: trustix_api.v1.LogAPI.GetMHLogAuditProof:output_type -> trustix_api.v1.ProofResponse
	10, // 26: trustix_api.v1.LogAPI.GetMHLogEntries:output_type -> trustix_api.v1.LogEntriesResponse
	17, // [17:27] is the sub-list for method output_type
	7,  // [7:17] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_api_api_proto_init() }
func file_api_api_proto_init() {
	if File_api_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogHeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogConsistencyProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogAuditProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMapValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseCompactMerkleProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSigner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_api_proto_goTypes,
		DependencyIndexes: file_api_api_proto_depIdxs,
		EnumInfos:         file_api_api_proto_enumTypes,
		MessageInfos:      file_api_api_proto_msgTypes,
	}.Build()
	File_api_api_proto = out.File
	file_api_api_proto_rawDesc = nil
	file_api_api_proto_goTypes = nil
	file_api_api_proto_depIdxs = nil
}
